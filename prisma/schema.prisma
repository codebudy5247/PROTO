generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum OrderEventStatus {
    PENDING
    ACCEPTED
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
}

enum PaymentProvider {
    UNKNOWN
    RAZORPAY
    PAYPAL
    STRIPE
}

enum CollectionType {
    MEN
    WOMEN
    KIDS
}

enum ProductSize {
    S
    M
    L
    XL
    XXL
    XXXL
}

enum ProductColor {
    BLACK
    WHITE
    GRAY
    RED
    ORANGE
    YELLOW
    GREEN
    PINK
    BLUE
    PURPLE
}

model User {
    id                     String     @id @default(uuid())
    name                   String
    email                  String     @unique
    password               String
    role                   Role       @default(USER)
    defaultShippingAddress String?
    defaultBillingAddress  String?
    createdAt              DateTime   @default(now())
    updatedAt              DateTime   @updatedAt
    addresses              Address[]
    cartItems              CartItem[]
    orders                 Order[]

    @@map("users")
}

model Address {
    id        String   @id @default(uuid())
    lineOne   String
    lineTwo   String?
    city      String
    country   String
    pincode   String
    User      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("addresses")
}

model Collection {
    id        Int              @id @default(autoincrement())
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    name      String           @db.VarChar(255)
    slug      String           @unique
    types     CollectionType[]
    parentId  Int?
    parent    Collection?      @relation(name: "ParentChild", fields: [parentId], references: [id])
    children  Collection[]     @relation(name: "ParentChild")
    products  Product[]

    @@map("collections")
}

model Product {
    id           String           @id @default(uuid())
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    name         String           @db.VarChar(255)
    description  String
    price        Float
    rate         Float
    published    Boolean          @default(false)
    images       ProductImage[]
    colors       ProductColor[]
    sizes        ProductSize[]
    types        CollectionType[]
    collection   Collection       @relation(fields: [collectionId], references: [id])
    collectionId Int

    cartItems CartItem[]
    orders    OrderProduct[]

    @@map("products")
}

model ProductImage {
    id        Int      @id @default(autoincrement())
    imageURL  String
    imageBlur String
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?

    @@map("product_images")
}

model CartItem {
    id        String   @id @default(uuid())
    User      User     @relation(fields: [userId], references: [id])
    userId    String
    Product   Product  @relation(fields: [productId], references: [id])
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("cart_items")
}

model Order {
    id        String           @id @default(uuid())
    User      User             @relation(fields: [userId], references: [id])
    userId    String
    netAmount Decimal
    address   String
    status    OrderEventStatus @default(PENDING)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    products  OrderProduct[]
    event     OrderEvent[]
    payment   Payment[]

    @@map("orders")
}

model OrderProduct {
    id        String   @id @default(uuid())
    Order     Order    @relation(fields: [orderId], references: [id])
    orderId   String
    Product   Product  @relation(fields: [productId], references: [id])
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("order_products")
}

model OrderEvent {
    id        String           @id @default(uuid())
    Order     Order            @relation(fields: [orderId], references: [id])
    orderId   String
    status    OrderEventStatus @default(PENDING)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    @@map("order_events")
}

model Payment {
    id              String          @id @default(uuid())
    paymentProvider PaymentProvider @default(UNKNOWN)
    paymentId       String
    isPaymentDone   Boolean         @default(false)
    order           Order           @relation(fields: [orderId], references: [id])
    orderId         String
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    @@map("payments")
}
